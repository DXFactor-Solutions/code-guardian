name: Code Review with Linting and PR Comment

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      language:
        description: 'Programming Language'
        required: false
        type: string
    secrets:
      language: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  lint_and_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Detect Programming Language
        id: set_lang
        run: |
          SUPPORTED_LANGUAGES=("nodejs" "python" "ruby")
          if [ -n "${{ github.event.inputs.language }}" ]; then
            LANGUAGE="${{ github.event.inputs.language }}"
            if [[ " ${SUPPORTED_LANGUAGES[@]} " =~ " ${LANGUAGE} " ]]; then
              echo "Detected language: $LANGUAGE"
              echo "lang=$LANGUAGE" >> $GITHUB_OUTPUT
            else
              echo "lang=unknown" >> $GITHUB_OUTPUT
            fi
          else
            if [ -f package.json ]; then
              echo "Detected language: nodejs"
              echo "lang=nodejs" >> $GITHUB_OUTPUT
            elif [ -f requirements.txt ]; then
              echo "Detected language: python"
              echo "lang=python" >> $GITHUB_OUTPUT
            elif [ -f Gemfile ]; then
              echo "Detected language: ruby"
              echo "lang=ruby" >> $GITHUB_OUTPUT
            else
              echo "lang=unknown" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Fail if Language Not Supported
        if: steps.set_lang.outputs.lang == 'unknown'
        run: |
          echo "Unsupported language detected. Exiting..."
          exit 1

      - name: Install Yarn for Node.js
        if: steps.set_lang.outputs.lang == 'nodejs'
        run: npm install -g yarn

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get file changes
        id: get_file_changes
        uses: dorner/file-changes-action@v1.2.0
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          plaintext: true

      - name: Echo file changes
        run: |
          echo "Changed files: ${{ steps.get_file_changes.outputs.files }}"

      - name: Run Linting for JavaScript/TypeScript (ESLint)
        if: steps.set_lang.outputs.lang == 'nodejs'
        run: |
          yarn install
          echo "Logging changed files..."
          echo "${{ steps.get_file_changes.outputs.files }}"
          yarn eslint --f stylish ${{ steps.get_file_changes.outputs.files }} > eslint_report.txt || true
          echo "Logging eslint report..."
          cat eslint_report.txt
        continue-on-error: true

      - name: Run Linting for Python (Pylint)
        if: steps.set_lang.outputs.lang == 'python'
        run: |
          pip install pylint
          pylint ${{ steps.get_file_changes.outputs.files }} > pylint_report.txt || true
        continue-on-error: true

      - name: Run Linting for Ruby (Rubocop)
        if: steps.set_lang.outputs.lang == 'ruby'
        run: |
          gem install rubocop
          rubocop ${{ steps.get_file_changes.outputs.files }} > rubocop_report.txt || true
        continue-on-error: true

      - name: Capture and Log Lint Report
        id: capture_report
        run: |
          if [ -f eslint_report.txt ]; then
            echo "Logging eslint output..."
            cat eslint_report.txt
            LINT_OUTPUT=$(cat eslint_report.txt)
          elif [ -f pylint_report.txt ]; then
            LINT_OUTPUT=$(cat pylint_report.txt)
          elif [ -f rubocop_report.txt ]; then
            LINT_OUTPUT=$(cat rubocop_report.txt)
          else
            LINT_OUTPUT="No linting errors found in the changed files."
          fi
          echo "$LINT_OUTPUT" > lint_report.txt
          echo "Logging lint output..."
          cat lint_report.txt

      - name: Install GitHub CLI (gh)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Format and Post Lint Report to PR Comment
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize the comment content with a header
          PR_COMMENT="# üîç **Lint Report Summary**"

          # Check if eslint, pylint, or rubocop reports exist and format them accordingly
          if [ -f eslint_report.txt ]; then
            LINT_REPORT=$(cat eslint_report.txt)
            PR_COMMENT+="- üì¶ **JavaScript/TypeScript (ESLint)**<br/>"
            if [ -s eslint_report.txt ]; then
              PR_COMMENT+="$LINT_REPORT"
            else
              PR_COMMENT+="‚úÖ No issues found in JavaScript/TypeScript code."
            fi
          fi

          if [ -f pylint_report.txt ]; then
            LINT_REPORT=$(cat pylint_report.txt)
            PR_COMMENT+="- üêç **Python (Pylint)**<br />"
            if [ -s pylint_report.txt ]; then
              PR_COMMENT+="$LINT_REPORT"
            else
              PR_COMMENT+="‚úÖ No issues found in Python code."
            fi
          fi

          if [ -f rubocop_report.txt ]; then
            LINT_REPORT=$(cat rubocop_report.txt)
            PR_COMMENT+="- üíé **Ruby (Rubocop)**<br />"
            if [ -s rubocop_report.txt ]; then
              PR_COMMENT+="$LINT_REPORT"
            else
              PR_COMMENT+="‚úÖ No issues found in Ruby code."
            fi
          fi

          # If no lint reports are found
          if [ ! -f eslint_report.txt ] && [ ! -f pylint_report.txt ] && [ ! -f rubocop_report.txt ]; then
            PR_COMMENT+="‚úÖ No linting errors found in the changed files."
          fi

          # Post the comment to the PR
          gh pr comment ${{ github.event.pull_request.number }} --body "$PR_COMMENT"
