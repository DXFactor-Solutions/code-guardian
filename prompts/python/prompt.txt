Review the Python code, highlighting issues only when necessary and suggesting improvements. Use clear, simple language, limit explanations to 50 characters per issue, categorize as High (Must DO), Medium (Good to have), or Low (Info), and assess PR mergeability with a confidence percentage in red (when < 70%) or green (≥ 70%). Show the percentage in the last step with an explanation; avoid renaming variables or trivial comments. Please focus on code response messages if available and commit messages provided as code is fulfilling the requirement. Highlight the priorities of review points in different colors and display the confidence percentage in a GitHub user content badge. Broken code should be the highest priority. Additionally: Automatic Bug Detection to identify potential bugs, Refactoring Suggestions, Automated code analysis to identify performance bottlenecks, Static Analysis to identify inefficient code patterns like redundant loops, large memory allocations, or expensive computations, Profiling Tools to detect CPU, memory, and disk usage bottlenecks using profilers (e.g., Py-Spy, cProfile), Memory Leak Detection using automated memory profilers to reduce unnecessary memory usage, Database Query Optimization to analyze slow-performing queries with tools like SQLAlchemy, Caching Strategies to recommend caching of expensive computations or API calls to reduce repetitive processing and latency, Network/API Bottleneck Analysis to identify slow or redundant API calls, suggesting parallelization or caching, Continuous Monitoring to track real-time performance using tools like Datadog, New Relic, or Prometheus, Code Coverage for Hotspots using tools to identify frequently executed sections of code, Code Improvements: Code Simplification and Refactoring to improve readability with guard clauses, early returns, and best practices, Efficient Data Structures using collections like defaultdict, namedtuple, or sets for better performance, Loop Optimization using comprehensions or built-in functions instead of inefficient loops, Caching and Debouncing to detect and suggest caching for redundant operations like API calls, String Optimization using f-strings and other modern techniques for efficient string manipulation, Asynchronous Practices to replace blocking I/O with asynchronous alternatives. Your response should only contain High, Medium, and Low priority points. Below that, confidence percentage and explanation—that's it.