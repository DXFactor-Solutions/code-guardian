name: Code Review with Linting and PR Comment

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      language:
        description: 'Programming Language'
        required: true
        type: string
    secrets:
      language: {}

permissions:
  contents: read
  pull-requests: write   # Allows writing comments to the pull request

jobs:
  detect_language:
    runs-on: ubuntu-latest
    outputs:
      lang: ${{ steps.set_lang.outputs.lang }}  # Set the detected language as output
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Detect Programming Language
        id: set_lang
        run: |
          SUPPORTED_LANGUAGES=("nodejs" "python" "ruby")
          if [ -n "${{ github.event.inputs.language }}" ]; then
            LANGUAGE="${{ github.event.inputs.language }}"
            if [[ " ${SUPPORTED_LANGUAGES[@]} " =~ " ${LANGUAGE} " ]]; then
              echo "Detected language: $LANGUAGE"
              echo "::set-output name=lang::$LANGUAGE"
            else
              echo "::set-output name=lang::unknown"
            fi
          else
            if [ -f package.json ]; then
              echo "Detected language: nodejs"
              echo "::set-output name=lang::nodejs"
            elif [ -f requirements.txt ]; then
              echo "Detected language: python"
              echo "::set-output name=lang::python"
            elif [ -f Gemfile ]; then
              echo "Detected language: ruby"
              echo "::set-output name=lang::ruby"
            else
              echo "::set-output name=lang::unknown"
            fi
          fi

      - name: Fail if Language Not Supported
        if: steps.set_lang.outputs.lang == 'unknown'
        run: |
          echo "Unsupported language detected. Exiting..."
          exit 1

  lint:
    needs: detect_language
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Install Yarn
        run: |
          npm install -g yarn

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get file changes
        id: get_file_changes
        uses: dorner/file-changes-action@v1.2.0
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          plaintext: true

      - name: Echo file changes
        run: |
          echo "Changed files: ${{ steps.get_file_changes.outputs.files }}"

      - name: Run Linting for JavaScript/TypeScript (ESLint)
        if: needs.detect_language.outputs.lang == 'nodejs'
        run: |
          yarn install
          echo "logging changed files.."
          echo "${{ steps.get_file_changes.outputs.files }}"
          yarn eslint ${{ steps.get_file_changes.outputs.files }} > eslint_report.txt || true
          echo "logging eslint report.."
          cat eslint_report.txt
        continue-on-error: true

      - name: Run Linting for Python (Pylint)
        if: needs.detect_language.outputs.lang == 'python'  # Use output from the previous job
        run: |
          pip install pylint
          pylint ${{ steps.get_file_changes.outputs.files }} > pylint_report.txt || true
        continue-on-error: true

      - name: Run Linting for Ruby (Rubocop)
        if: needs.detect_language.outputs.lang == 'ruby'  # Use output from the previous job
        run: |
          gem install rubocop
          rubocop ${{ steps.get_file_changes.outputs.files }} > rubocop_report.txt || true
        continue-on-error: true

      - name: Capture Lint Report
        id: capture_report
        run: |
          if [ -f eslint_report.txt ]; then
            echo "logging eslint output => "
            cat eslint_report.txt
            LINT_OUTPUT=$(cat eslint_report.txt)
          elif [ -f pylint_report.txt ]; then
            LINT_OUTPUT=$(cat pylint_report.txt)
          elif [ -f rubocop_report.txt ]; then
            LINT_OUTPUT=$(cat rubocop_report.txt)
          else
            LINT_OUTPUT="No linting errors found in the changed files."
          fi
          echo "$LINT_OUTPUT" > lint_report.txt
          echo "logging lint output => "
          cat lint_report.txt

      - name: Install GitHub CLI (gh)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Read and Post Lint Report to PR Comment
        run: |
          if [ -f lint_report.txt ]; then
            LINT_REPORT=$(cat lint_report.txt)
            gh pr comment ${{ github.event.pull_request.number }} --body "$LINT_REPORT"
          else
            echo "No lint report found."
          fi
