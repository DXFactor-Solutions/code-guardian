# .github/workflows/ai-driven-review.yml
name: AI-Driven Code Review

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      azure_openai_api_key:
        description: 'API Key for Azure OpenAI'
        required: true
        type: string
      language:
        description: 'Programming Langugage'
        required: true
        type: string
    secrets:
      azure_openai_api_key: {}
      language: {}


permissions:
  contents: read
  pull-requests: write   # Allows writing comments to the pull request

jobs:
  ai_code_review:
    runs-on: ubuntu-latest
    env:
      AZURE_OPENAI_API_KEY: ${{ inputs.azure_openai_api_key }}
      LANGUAGE: ${{ inputs.language }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Checkout action repository
        uses: actions/checkout@v4.1.1
        with:
          repository: DXFactor-Solutions/code-guardian
          path: common-repo

      - name: Install yq (YAML Processor) and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Install GitHub CLI (gh)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set up Node.js (if needed)
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      # Parse the config file and store it as base64 in the environment variable 'content'
      - name: Parse Config File
        id: config
        run: |
          if [ -f common-repo/config/config.yaml ]; then
            echo "content=$(cat common-repo/config/config.yaml | base64 -w 0)" >> $GITHUB_ENV
          else
            echo "Error: config.yaml not found."
            exit 1
          fi

      # Decode the config file from the 'content' environment variable
      - name: Decode Config
        run: |
          if [ -n "${{ env.content }}" ]; then
            echo "${{ env.content }}" | base64 --decode > decoded_config.yaml
            echo "Config file successfully decoded."
          else
            echo "Error: Config content not found."
            exit 1
          fi

      - name: Detect Programming Language
        id: set_lang
        run: |
          SUPPORTED_LANGUAGES=("nodejs" "python" "ruby")
          if [ -n "${{ github.event.inputs.language }}" ]; then
            LANGUAGE="${{ github.event.inputs.language }}"
            if [[ " ${SUPPORTED_LANGUAGES[@]} " =~ " ${LANGUAGE} " ]]; then
              echo "Detected language: $LANGUAGE"
              echo "lang=$LANGUAGE" >> $GITHUB_OUTPUT
            else
              echo "lang=unknown" >> $GITHUB_OUTPUT
            fi
          else
            if [ -f package.json ]; then
              echo "Detected language: nodejs"
              echo "lang=nodejs" >> $GITHUB_OUTPUT
            elif [ -f requirements.txt ]; then
              echo "Detected language: python"
              echo "lang=python" >> $GITHUB_OUTPUT
            elif [ -f Gemfile ]; then
              echo "Detected language: ruby"
              echo "lang=ruby" >> $GITHUB_OUTPUT
            else
              echo "lang=unknown" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Fail if Language Not Supported
        if: steps.set_lang.outputs.lang == 'unknown'
        run: |
          echo "Unsupported language detected. Skipping code review."
          exit 1

      - name: Retrieve Language-Specific Prompts
        run: |
          echo "Decoded config contents:"
          cat decoded_config.yaml

          LANG=${{ steps.set_lang.outputs.lang }}

          echo "Using language: $LANG"
          PROMPT_FILE=$(yq e ".languages.${LANG}.prompt_file" decoded_config.yaml)

          echo "System prompt file path: $PROMPT_FILE"

          if [ -f "common-repo/$PROMPT_FILE" ]; then
            cat "common-repo/$PROMPT_FILE" > system_prompt.txt
          else
            echo "System prompt file not found: $PROMPT_FILE"
            exit 1
          fi

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get PR Diff
        uses: GrantBirki/git-diff-action@v2.4.0
        id: git-diff
        with:
          base_branch: origin/${{ github.event.pull_request.base.ref }}  # Use the remote branch reference
          raw_diff_file_output: diff.txt
          file_output_only: "true"
          search_path: "."
          max_buffer_size: 10000000
      
      - name: Get Git Log and Save to File
        run: git log --no-merges --pretty=format:"%s" origin/${{ github.event.pull_request.base.ref }}..HEAD > commit_messages.txt

      - name: Read Commit Messages and Diff from Files
        id: combined_prompt
        run: |
          GIT_LOG=$(cat commit_messages.txt)
          DIFF=$(cat diff.txt)

          # Create a combined user prompt that includes both the commit messages and code diff
          echo "### Commit Message History:"
          echo "### Commit Message History:" > combined_prompt.txt
          echo "$GIT_LOG"
          echo "$GIT_LOG" >> combined_prompt.txt
          echo ""
          echo "" >> combined_prompt.txt
          echo "### Code Diff:"
          echo "### Code Diff:" >> combined_prompt.txt
          echo "$DIFF"
          echo "$DIFF" >> combined_prompt.txt

          cat combined_prompt.txt

          # Save combined prompt for later use
          # echo "git_log_and_diff_output=$(cat combined_prompt.txt)" >> $GITHUB_ENV
        
      - name: Send Azure OpenAI API Request for Code Review
        id: ai_review
        env:
          AZURE_OPENAI_API_KEY: ${{ inputs.azure_openai_api_key }}
        run: |
          SYSTEM_PROMPT=$(cat system_prompt.txt)
          USER_PROMPT=$(cat combined_prompt.txt)

          # Escape SYSTEM_PROMPT and USER_PROMPT to ensure they're valid JSON
          escaped_system_prompt=$(echo "$SYSTEM_PROMPT" | jq -s -R -r @json)
          escaped_user_prompt=$(echo "$USER_PROMPT" | jq -s -R -r @json)

          echo "Escaped code for request: $escaped_user_prompt"

          # Construct the JSON payload with escaped content
          request_payload="{
            \"messages\": [
              { \"role\": \"system\", \"content\": $escaped_system_prompt },
              { \"role\": \"user\", \"content\": $escaped_user_prompt }
            ],
            \"temperature\": 0,
            \"top_p\": 1,
            \"n\": 1,
            \"max_tokens\": 1500
          }"

          echo "request_payload: $request_payload"

          RESPONSE=$(curl -s -X POST https://code-guardians.openai.azure.com/openai/deployments/code-guardians-gpt-4o/chat/completions?api-version=2024-06-01 \
            -H "Content-Type: application/json" \
            -H "api-key: $AZURE_OPENAI_API_KEY" \
            -d "$request_payload")

          echo "Response from GPT => $RESPONSE"

          if [[ -z "$RESPONSE" || "$RESPONSE" == "null" ]]; then
            echo "Azure OpenAI response was empty. Exiting..."
            exit 1
          fi

          # Extract the code review suggestions from the response
          code_review_suggestions=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Save the suggestions to a file
          echo "$code_review_suggestions" > code_suggestions.txt

      - name: Add AI Comments to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(cat code_suggestions.txt)
          gh pr comment ${{ github.event.pull_request.number }} --body "$RESPONSE"
